/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
// const express = require('express');
// const bodyParser = require('body-parser');
import express from "express"
import body_parser from "body-parser"
import jwt from "jsonwebtoken"
import { v4 as uuidv4 } from "uuid"
const app = express();
app.use(body_parser.json())
var allData = [{ id: 12345, name: "Name", password: "Password", todos: [{ id: 1, title: "title", description: "description" }] }];
var allTodos = [{ "id": 1, "title": "title", "description": "description" }];
const jwt_secret_code = "tOdo@JWt"

function generateToken(dataTosign) {
  return jwt.sign(dataTosign, jwt_secret_code);
}
function verifyToken(dataToVerify) {
  var userverify = jwt.verify(dataToVerify, jwt_secret_code);
  return userverify;

}

///User middleware
const userMiddleware = (req, res, next) => {
  const { token } = req.headers;
  var tokenExpiry = verifyToken(token);
  const { name, password } = tokenExpiry;

  console.log(tokenExpiry);
  var user = allData.find((ele) => (ele.name === name && ele.password === password));

  if (user) {
    req.user = user;
    next();
  } else {
    res.status(403).send({
      statusCode: 0, message: "Session Expired Please Login"
    });
  }
};

app.post("/signup", (req, res) => {
  const { name, password } = req.body;
  var checkUser = allData.find((ele) => (ele.name === name && ele.password === password));
  if (checkUser) {
    res.send({ statusCode: 0, message: "User Already Exist", token: generateToken({ name: name, password: password }) });
  } else {
    allData.push({
      id: uuidv4(),
      name: name, password: password, todos: []
    });
    res.status(200).send({ statusCode: 1, message: "Account Created Successfully", token: generateToken({ name: name, password: password }) })
  }

});

// GET /todos
app.get("/todos", userMiddleware, (req, res) => {
  if (req.user.todos.length > 0) {
    res.send({ statusCode: 1, data: req.user.todos });
  } else {
    res.send({ statusCode: 0, message: "No Records Found" });
  }
});

// POST /todos - Create a new todo item
app.post("/todos", userMiddleware, (req, res) => {
  const { title, description } = req.body;
  req.user.todos.push({
    id: uuidv4(), title: title, description: description
  });
  res.send({ statusCode: 1, message: "Todo Added" })
});

// .GET /todos/:id - Retrieve a specific todo item by ID
app.get("/todos/:id", userMiddleware, (req, res) => {
  var id = req.params.id;
  var checkTodoWithId = req.user.todos.find((eachTodo) => (eachTodo.id === id));
  if (checkTodoWithId) {
    res.send({ statusCode: 1, data: checkTodoWithId })
  } else {
    res.send({ statusCode: 0, message: "Todo Not Found" });
  }
});

// PUT /todos/:id - Update an existing todo item by ID
app.put("/todos/:id", userMiddleware, (req, res) => {
  const id = req.params.id;
  const { title, description } = req.body;

  var updateTodoIdData = req.user.todos.find((eachTodo) => (eachTodo.id === id));
  if (updateTodoIdData) {
    updateTodoIdData.title = title;
    updateTodoIdData.description = description;
    res.send({ statusCode: 1, message: "Updated Successfully" });
  } else {
    res.send({ statusCode: 0, message: "Todo Not Found" });
  }


})
//DELETE /todos/:id - Delete a todo item by IDs
app.delete("/todos/:id", userMiddleware, (req, res) => {
  var id = req.params.id;
  var newList = req.user.todos.filter(ele => ele.id != id);
  req.user.todos = newList;
  res.send({ statusCode: 1, message: "Deleted successfully" });
});

app.listen(3000, () => {
  console.log("Server Started At 3000");
})


// module.exports = app;
